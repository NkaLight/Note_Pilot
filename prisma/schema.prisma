generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model application_user {
  user_id            Int                  @id @default(autoincrement())
  username           String               @unique @db.VarChar(20)
  password           String
  email              String               @unique @db.VarChar(255)
  date_of_creation   DateTime?            @default(now()) @db.Timestamp(6)
  paper              paper[]
  preferences        preferences?
  session            session[]
  twofactorauthtoken twofactorauthtoken[]
}

model flashcard {
  flashcard_id   Int           @id @default(autoincrement())
  set_id         Int
  question_front String
  answer_back    String
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  learnt         Boolean?      @default(false)
  flashcard_set  flashcard_set @relation(fields: [set_id], references: [set_id], onDelete: Cascade, onUpdate: NoAction)
}

model flashcard_set {
  set_id    Int         @id @default(autoincrement())
  upload_id Int         @unique
  text_data String
  flashcard flashcard[]
  upload    upload      @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade, onUpdate: NoAction)
}

model glossary {
  glossary_id Int       @id @default(autoincrement())
  upload_id   Int       @unique
  text_data   String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  upload      upload    @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade, onUpdate: NoAction)
  term        term[]
}

model paper {
  paper_id         Int              @id @default(autoincrement())
  user_id          Int
  filename         String           @db.VarChar(255)
  uploaded_at      DateTime?        @default(now()) @db.Timestamp(6)
  application_user application_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  upload           upload[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model preferences {
  user_id          Int              @id
  learner_style    String?          @db.VarChar(50)
  dark_mode        Boolean?         @default(false)
  language         String?          @db.VarChar(20)
  application_user application_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model problem {
  problem_id    Int         @id @default(autoincrement())
  pset_id       Int
  question_text String
  answer_text   String?
  problem_set   problem_set @relation(fields: [pset_id], references: [pset_id], onDelete: Cascade, onUpdate: NoAction)
}

model problem_set {
  pset_id   Int       @id @default(autoincrement())
  upload_id Int       @unique
  text_data String
  problem   problem[]
  upload    upload    @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade, onUpdate: NoAction)
}

model session {
  session_id       Int              @id @default(autoincrement())
  user_id          Int
  token            String
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  expires_at       DateTime?        @db.Timestamp(6)
  last_active_at   DateTime?        @db.Timestamp(6)
  is_used          Boolean?         @default(false)
  application_user application_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model summary {
  summary_id Int       @id @default(autoincrement())
  upload_id  Int       @unique
  text_data  String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  upload     upload    @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade, onUpdate: NoAction)
}

model term {
  term_id     Int      @id @default(autoincrement())
  glossary_id Int
  term_data   String
  glossary    glossary @relation(fields: [glossary_id], references: [glossary_id], onDelete: Cascade, onUpdate: NoAction)
}

model twofactorauthtoken {
  token_id         Int              @id @default(autoincrement())
  user_id          Int
  token            String
  expires_at       DateTime         @db.Timestamp(6)
  is_used          Boolean?         @default(false)
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  application_user application_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model upload {
  upload_id     Int            @id @default(autoincrement())
  paper_id      Int
  filename      String
  storage_path  String
  flashcard_set flashcard_set?
  glossary      glossary?
  problem_set   problem_set?
  summary       summary?
  paper         paper          @relation(fields: [paper_id], references: [paper_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([paper_id, filename])
}
